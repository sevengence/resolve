from aiogram import Router, Bot, types
from aiogram.filters import Command
from datetime import datetime
from pytz import timezone
from config import AUTHORIZED_USERS

router = Router()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∏–µ–≤–∞
KIEV_TIMEZONE = timezone('Europe/Kiev')

# ID –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
ALLOWED_CHAT_ID = -1001509336046  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à chat_id


async def check_chat_access(message: types.Message, bot: Bot) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É:
    - –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.
    - –†–∞–±–æ—Ç–∞–µ—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
    """
    if message.chat.type == "private":
        # –†–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
        if message.from_user.id not in AUTHORIZED_USERS:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return False
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.id != ALLOWED_CHAT_ID:
        await bot.leave_chat(message.chat.id)
        return False

    return True


@router.message(Command("list"))
async def list_invoices_handler(message: types.Message, db, bot: Bot):
    if not await check_chat_access(message, bot):
        return

    invoices = db.get_all_invoices()
    now = datetime.now(tz=KIEV_TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")
    await message.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É

    if not invoices:
        quotes = [
            "–û—à–∏–±–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –ö–ª–∏–µ–Ω—Ç –Ω–µ—Ä–≤–Ω–∏—á–∞–µ—Ç. –°–µ—Ä—ë–∂–∞ –≤—Å—Ç–∞—ë—Ç –∏–∑-–∑–∞ —Å—Ç–æ–ª–∞. –ö–ª–∏–µ–Ω—Ç —É–∂–µ –¥–æ–≤–æ–ª–µ–Ω.",
            "–ü—Ä–æ–±–ª–µ–º–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è. –í–∞–Ω–µ—á–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, –°–µ—Ä—ë–∂–∞ –∫–∏–≤–Ω—É–ª. –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ —Å—Ç–∞–ª–æ.",
            "–ì—Ä—É–∑ –Ω–µ –æ—Ç–≥—Ä—É–∂–µ–Ω. –í–∞–Ω–µ—á–∫–∞ –∑–∞–∫–∞—Ç–∞–ª —Ä—É–∫–∞–≤–∞. –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –æ–Ω —É–∂–µ –≤ –ø—É—Ç–∏.",
            "–°–∏—Å—Ç–µ–º–∞ —Å–ª–æ–º–∞–ª–∞—Å—å. –°–µ—Ä—ë–∂–∞ –Ω–∞–∂–∞–ª –¥–≤–µ –∫–Ω–æ–ø–∫–∏. –°–∏—Å—Ç–µ–º–∞ –ø–æ–Ω—è–ª–∞, —á—Ç–æ –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å.",
            "–ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å–∫–∞–∑–∞–ª ¬´—Ç–∞–∫ –Ω–µ–ª—å–∑—è¬ª. –í–∞–Ω–µ—á–∫–∞ —Å–∫–∞–∑–∞–ª ¬´—É–∂–µ –º–æ–∂–Ω–æ¬ª. –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è.",
            "–ù–∞–∫–ª–∞–¥–Ω–∞—è –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å. –°–µ—Ä—ë–∂–∞ –¥–æ—Å—Ç–∞–ª –Ω–æ–≤—É—é. –¢–µ–ø–µ—Ä—å –∏—Ö –¥–≤–µ.",
            "–ö–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ–≤–æ–ª–µ–Ω. –í–∞–Ω–µ—á–∫–∞ —Å–¥–µ–ª–∞–ª –∑–≤–æ–Ω–æ–∫. –ö–ª–∏–µ–Ω—Ç –¥–æ–≤–æ–ª–µ–Ω.",
            "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–ø—É—Ç–∞–Ω—ã. –°–µ—Ä—ë–∂–∞ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤ –º–æ–Ω–∏—Ç–æ—Ä. –ú–æ–Ω–∏—Ç–æ—Ä –≤—Å—ë –ø–æ–Ω—è–ª.",
            "–ù–æ—á—å—é –ø—Ä–∏—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è. –£—Ç—Ä–æ–º –µ—ë —É–∂–µ –Ω–µ –±—ã–ª–æ. –í–∞–Ω–µ—á–∫–∞ —Ä–µ—à–∏–ª.",
        ]
        await message.answer(quotes[datetime.now().second % len(quotes)])
        return

    response = [f"üìã –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–∞ {now}: {len(invoices)}"]
    for idx, invoice in enumerate(invoices, start=1):
        link = f"https://t.me/c/{str(invoice['chat_id'])[4:]}/{invoice['message_id']}"
        response.append(f"{idx}. {invoice['client_name']} ‚Äî [–°—Å—ã–ª–∫–∞]({link})")

    await message.answer("\n".join(response), parse_mode="Markdown")


@router.message(Command("add"))
async def add_invoice_handler(message: types.Message, db, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ.
    """
    reply = message.reply_to_message

    if not reply or not reply.photo:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ /add —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ñ–æ—Ç–æ
    client_name = None
    if reply.caption:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω
        client_name = reply.caption.strip()
    elif len(message.text.split()) > 1:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–µ /add –§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        client_name = " ".join(message.text.split()[1:]).strip()

    if not client_name:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await message.reply(
            "‚ö†Ô∏è –ù–∞–∫–ª–∞–¥–Ω–∞—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç. "
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /add.\n"
            "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /add –§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∫–ª–∞–¥–Ω—É—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    db.add_invoice(
        chat_id=reply.chat.id,
        message_id=reply.message_id,
        client_name=client_name,
        user_id=message.from_user.id,
        full_name=message.from_user.full_name
    )
    await message.delete()


@router.message(Command("report"))
async def detailed_report_handler(message: types.Message, db, bot: Bot):
    if not await check_chat_access(message, bot):
        return

    today_invoices = db.get_today_invoices()
    resolved_invoices = db.get_today_resolved_invoices()
    deleted_invoices = db.get_today_deleted_invoices()

    total_added = len(today_invoices)
    total_resolved = len(resolved_invoices)
    total_deleted = len(deleted_invoices)

    now = datetime.now(tz=KIEV_TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")
    report = [
        f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–º –Ω–∞ {now}:",
        f"‚ûñ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_added}",
        f"‚úÖ –†–µ—à–µ–Ω–æ: {total_resolved}",
        f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {total_deleted}",
    ]

    employees = {}
    for invoice in today_invoices:
        user_id = invoice["added_by"]["user_id"]
        full_name = invoice["added_by"]["full_name"]
        if user_id not in employees:
            employees[user_id] = {"name": full_name, "added": 0, "resolved": 0, "deleted": 0}
        employees[user_id]["added"] += 1

    for invoice in resolved_invoices:
        user_id = invoice["added_by"]["user_id"]
        if user_id in employees:
            employees[user_id]["resolved"] += 1

    for invoice in deleted_invoices:
        user_id = invoice["added_by"]["user_id"]
        if user_id in employees:
            employees[user_id]["deleted"] += 1

    report.append("\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:")
    for employee in employees.values():
        report.append(
            f"üë§ {employee['name']}:\n"
            f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {employee['added']}\n"
            f"   ‚úÖ –†–µ—à–µ–Ω–æ: {employee['resolved']}\n"
            f"   ‚ùå –£–¥–∞–ª–µ–Ω–æ: {employee['deleted']}\n"
        )

    await message.delete()
    await message.answer("\n".join(report))


@router.message(Command("del"))
async def delete_invoice_handler(message: types.Message, db, bot: Bot):
    if not await check_chat_access(message, bot):
        return

    reply = message.reply_to_message
    if reply:
        invoice = db.find_invoice_by_message_id(reply.message_id)
        if not invoice:
            await message.delete()
            return
        db.delete_invoice(reply.message_id)
        await message.delete()
        return

    try:
        index = int(message.text.split()[1]) - 1
        invoices = db.get_all_invoices()
        if index < 0 or index >= len(invoices):
            raise IndexError
        invoice = invoices[index]
        db.delete_invoice(invoice["message_id"])
    except (IndexError, ValueError):
        pass
    finally:
        await message.delete()


@router.message(Command("help"))
async def help_command_handler(message: types.Message, bot: Bot):
    """
    –ö–æ–º–∞–Ω–¥–∞ /help: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.
    """
    help_text = """
üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –Ω–∞–∫–ª–∞–¥–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
/del - –£–¥–∞–ª–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.
/report - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–º –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
- –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–∞–∫–ª–∞–¥–Ω—É—é —Å "++", —á—Ç–æ–±—ã –ø–æ–º–µ—Ç–∏—Ç—å –µ—ë –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é.
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º, –∏ –±–æ—Ç –¥–æ–±–∞–≤–∏—Ç –µ—ë –≤ —Å–ø–∏—Å–æ–∫.
    """
    await message.reply(help_text)


@router.message(lambda message: message.reply_to_message and "++" in message.text)
async def resolve_invoice_handler(message: types.Message, db, bot: Bot):
    if not await check_chat_access(message, bot):
        return

    reply = message.reply_to_message
    invoice = db.find_invoice_by_message_id(reply.message_id)
    if not invoice:
        return

    db.resolve_invoice(reply.message_id)


@router.message()
async def auto_add_invoice_handler(message: types.Message, db, bot: Bot):
    if not await check_chat_access(message, bot):
        return

    if message.photo and message.caption:
        client_name = message.caption.strip()
        db.add_invoice(
            chat_id=message.chat.id,
            message_id=message.message_id,
            client_name=client_name,
            user_id=message.from_user.id,
            full_name=message.from_user.full_name
        )
