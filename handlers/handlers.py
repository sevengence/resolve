from aiogram import Router, Bot, types
from aiogram.filters import Command
from datetime import datetime
from pytz import timezone
from config import AUTHORIZED_USERS

router = Router()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∏–µ–≤–∞
KIEV_TIMEZONE = timezone('Europe/Kiev')


@router.message(Command("list"))
async def list_invoices_handler(message: types.Message, db, bot: Bot):
    """
    –ö–æ–º–∞–Ω–¥–∞ /list: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
    –ï—Å–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–µ—Ç, –ø–∏—à–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –î–∂–µ–π—Å–æ–Ω–∞ –°—Ç–µ—Ç—Ö—ç–º–∞.
    """
    invoices = db.get_all_invoices()
    now = datetime.now(tz=KIEV_TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")
    await message.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É

    if not invoices:
        # –ï—Å–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        quotes = [
            "üéØ –í—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–µ—à–µ–Ω—ã. –ö–ª–∏–µ–Ω—Ç—ã –¥–æ–≤–æ–ª—å–Ω—ã, –∞ –≤—ã ‚Äî –∫–∞–∫ –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ. –°–ª–∞–±–æ—Å—Ç—å –Ω–µ –≤ –≤–∞—à–µ–º —Å—Ç–∏–ª–µ.",
            "üî• –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∏ —É—Ö–æ–¥—è—Ç, –∞ –≤—ã –æ—Å—Ç–∞—ë—Ç–µ—Å—å –º–∞—Å—Ç–µ—Ä–æ–º —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞. –í—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ ‚Äî –ø–æ–¥ –≤–∞—à–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.",
            "üöÄ –†–µ—à–∏—Ç—å –≤—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ? –õ–µ–≥–∫–æ. –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –µ—â—ë –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ.",
            "üí™ –í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ: –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤. –í—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç—ã, –∞ –∫–ª–∏–µ–Ω—Ç—ã —É–ª—ã–±–∞—é—Ç—Å—è.",
            "‚ö° –£ –≤–∞—Å –Ω–µ –±—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö –¥–Ω–µ–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã —Ä–µ—à–∞–µ—Ç–µ –≤—Å—ë –±—ã—Å—Ç—Ä–æ –∏ —á—ë—Ç–∫–æ. –í–æ—Ç —ç—Ç–æ —è –ø–æ–Ω–∏–º–∞—é ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.",
            "üíº –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∑–≤–æ–Ω–∫–∏. –≠—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ. –ò –≤—ã –µ–≥–æ –∏—Å—Ç–∏–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞. –í—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç—ã, –∫–ª–∏–µ–Ω—Ç—ã —Å—á–∞—Å—Ç–ª–∏–≤—ã.",
            "ü•ã –†–µ—à–∏—Ç—å –≤—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ? –î–ª—è –≤–∞—Å —ç—Ç–æ –Ω–µ –∑–∞–¥–∞—á–∞, –∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–æ–π. –ß—ë—Ç–∫–æ, —Ç–æ—á–Ω–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π.",
            "üåü –° –∫–∞–∂–¥—ã–º –∑–∞–∫—Ä—ã—Ç—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –≤—ã –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ: –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã –Ω–µ –±–æ—è—Ç—Å—è –≤—ã–∑–æ–≤–æ–≤. –ò –≤—ã, –±–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è, –ª—É—á—à–∏–µ.",
            "üçÄ –ö–æ–≥–¥–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç—ã, –∞ –∫–ª–∏–µ–Ω—Ç—ã —Å—á–∞—Å—Ç–ª–∏–≤—ã, –º–∏—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ª—É—á—à–µ. –ò –≤—Å—ë –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ.",
            "üîë –ù–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç, –∫–∞–∫ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏. –û–Ω–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞—é—Ç —ç—Ç–æ. –ò –¥–µ–ª–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ."
        ]
        await message.answer(quotes[datetime.now().second % len(quotes)])
        return

    response = [f"üìã –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–∞ {now}: {len(invoices)}"]
    for idx, invoice in enumerate(invoices, start=1):
        link = f"https://t.me/c/{str(invoice['chat_id'])[4:]}/{invoice['message_id']}"
        response.append(f"{idx}. {invoice['client_name']} ‚Äî [–°—Å—ã–ª–∫–∞]({link})")

    await message.answer("\n".join(response), parse_mode="Markdown")



@router.message(Command("add"))
async def add_invoice_handler(message: types.Message, db, bot: Bot):
    reply = message.reply_to_message
    client_name = None

    if reply:
        if reply.caption:
            client_name = reply.caption.strip()
        elif reply.text:
            client_name = reply.text.strip()

    if not client_name:
        args = message.text.split(maxsplit=1)
        if len(args) == 2:
            client_name = args[1].strip()

    if client_name:
        db.add_invoice(
            chat_id=reply.chat.id if reply else message.chat.id,
            message_id=reply.message_id if reply else message.message_id,
            client_name=client_name,
            user_id=message.from_user.id,
            full_name=message.from_user.full_name
        )
    await message.delete()


@router.message(Command("report"))
async def detailed_report_handler(message: types.Message, db, bot: Bot):
    if message.from_user.id not in AUTHORIZED_USERS:
        await message.delete()
        return

    today_invoices = db.get_today_invoices()
    resolved_invoices = db.get_today_resolved_invoices()
    deleted_invoices = db.get_today_deleted_invoices()

    total_added = len(today_invoices)
    total_resolved = len(resolved_invoices)
    total_deleted = len(deleted_invoices)

    now = datetime.now(tz=KIEV_TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")
    report = [
        f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–º –Ω–∞ {now}:",
        f"‚ûñ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_added}",
        f"‚úÖ –†–µ—à–µ–Ω–æ: {total_resolved}",
        f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {total_deleted}",
    ]

    employees = {}
    for invoice in today_invoices:
        user_id = invoice["added_by"]["user_id"]
        full_name = invoice["added_by"]["full_name"]
        if user_id not in employees:
            employees[user_id] = {"name": full_name, "added": 0, "resolved": 0, "deleted": 0}
        employees[user_id]["added"] += 1

    for invoice in resolved_invoices:
        user_id = invoice["added_by"]["user_id"]
        if user_id in employees:
            employees[user_id]["resolved"] += 1

    for invoice in deleted_invoices:
        user_id = invoice["added_by"]["user_id"]
        if user_id in employees:
            employees[user_id]["deleted"] += 1

    report.append("\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:")
    for employee in employees.values():
        report.append(
            f"üë§ {employee['name']}:\n"
            f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {employee['added']}\n"
            f"   ‚úÖ –†–µ—à–µ–Ω–æ: {employee['resolved']}\n"
            f"   ‚ùå –£–¥–∞–ª–µ–Ω–æ: {employee['deleted']}\n"
        )

    await message.delete()
    await message.answer("\n".join(report))


@router.message(Command("del"))
async def delete_invoice_handler(message: types.Message, db, bot: Bot):
    reply = message.reply_to_message
    if reply:
        invoice = db.find_invoice_by_message_id(reply.message_id)
        if not invoice:
            await message.delete()
            return
        db.delete_invoice(reply.message_id)
        await message.delete()
        return

    try:
        index = int(message.text.split()[1]) - 1
        invoices = db.get_all_invoices()
        if index < 0 or index >= len(invoices):
            raise IndexError
        invoice = invoices[index]
        db.delete_invoice(invoice["message_id"])
    except (IndexError, ValueError):
        pass
    finally:
        await message.delete()


@router.message(lambda message: message.reply_to_message and ("++" in message.text or "–æ—Ç–º–µ–Ω–∞" in message.text))
async def resolve_invoice_handler(message: types.Message, db, bot: Bot):
    reply = message.reply_to_message

    invoice = db.find_invoice_by_message_id(reply.message_id)
    if not invoice:
        return

    db.resolve_invoice(reply.message_id)


@router.message()
async def auto_add_invoice_handler(message: types.Message, db, bot: Bot):
    if message.photo and message.caption:
        client_name = message.caption.strip()
        db.add_invoice(
            chat_id=message.chat.id,
            message_id=message.message_id,
            client_name=client_name,
            user_id=message.from_user.id,
            full_name=message.from_user.full_name
        )
